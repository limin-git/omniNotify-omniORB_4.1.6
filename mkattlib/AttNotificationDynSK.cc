// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "AttNotification.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_AttNotification_mIactSeq = CORBA::TypeCode::PR_alias_tc("IDL:att.com/AttNotification/IactSeq:1.0", "IactSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Interactive:1.0", "Interactive", &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_IactSeq = _0RL_tc_AttNotification_mIactSeq;
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_IactSeq = _0RL_tc_AttNotification_mIactSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_AttNotification_mNameSeq = CORBA::TypeCode::PR_alias_tc("IDL:att.com/AttNotification/NameSeq:1.0", "NameSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_NameSeq = _0RL_tc_AttNotification_mNameSeq;
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_NameSeq = _0RL_tc_AttNotification_mNameSeq;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_Interactive = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Interactive:1.0", "Interactive", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_Interactive = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Interactive:1.0", "Interactive", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_CosEvProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPushSupplier:1.0", "CosEvProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_CosEvProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPushSupplier:1.0", "CosEvProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_CosEvProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPullSupplier:1.0", "CosEvProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_CosEvProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPullSupplier:1.0", "CosEvProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_CosEvProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPushConsumer:1.0", "CosEvProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_CosEvProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPushConsumer:1.0", "CosEvProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_CosEvProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPullConsumer:1.0", "CosEvProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_CosEvProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/CosEvProxyPullConsumer:1.0", "CosEvProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPushSupplier:1.0", "ProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPushSupplier:1.0", "ProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPullSupplier:1.0", "ProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPullSupplier:1.0", "ProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPushConsumer:1.0", "ProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPushConsumer:1.0", "ProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPullConsumer:1.0", "ProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ProxyPullConsumer:1.0", "ProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPushSupplier:1.0", "StructuredProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_StructuredProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPushSupplier:1.0", "StructuredProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPullSupplier:1.0", "StructuredProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_StructuredProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPullSupplier:1.0", "StructuredProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPushConsumer:1.0", "StructuredProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_StructuredProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPushConsumer:1.0", "StructuredProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPullConsumer:1.0", "StructuredProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_StructuredProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/StructuredProxyPullConsumer:1.0", "StructuredProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPushSupplier:1.0", "SequenceProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_SequenceProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPushSupplier:1.0", "SequenceProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPullSupplier:1.0", "SequenceProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_SequenceProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPullSupplier:1.0", "SequenceProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPushConsumer:1.0", "SequenceProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_SequenceProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPushConsumer:1.0", "SequenceProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPullConsumer:1.0", "SequenceProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_SequenceProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SequenceProxyPullConsumer:1.0", "SequenceProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_SupplierAdmin = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SupplierAdmin:1.0", "SupplierAdmin", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_SupplierAdmin = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/SupplierAdmin:1.0", "SupplierAdmin", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ConsumerAdmin = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ConsumerAdmin:1.0", "ConsumerAdmin", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ConsumerAdmin = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/ConsumerAdmin:1.0", "ConsumerAdmin", &_0RL_tcTrack);
#endif

static CORBA::PR_structMember _0RL_structmember_AttNotification_mChannelStats[] = {
  {"num_announcements", CORBA::TypeCode::PR_long_tc()},
  {"num_notifications", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_AttNotification_mChannelStats
#  undef _0RL_tc_AttNotification_mChannelStats
#endif
static CORBA::TypeCode_ptr _0RL_tc_AttNotification_mChannelStats = CORBA::TypeCode::PR_struct_tc("IDL:att.com/AttNotification/ChannelStats:1.0", "ChannelStats", _0RL_structmember_AttNotification_mChannelStats, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ChannelStats = _0RL_tc_AttNotification_mChannelStats;
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ChannelStats = _0RL_tc_AttNotification_mChannelStats;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_EventChannel = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/EventChannel:1.0", "EventChannel", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_EventChannel = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/EventChannel:1.0", "EventChannel", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_EventChannelFactory = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/EventChannelFactory:1.0", "EventChannelFactory", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_EventChannelFactory = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/EventChannelFactory:1.0", "EventChannelFactory", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_Filter = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Filter:1.0", "Filter", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_Filter = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Filter:1.0", "Filter", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_MappingFilter = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/MappingFilter:1.0", "MappingFilter", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_MappingFilter = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/MappingFilter:1.0", "MappingFilter", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_FilterFactory = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/FilterFactory:1.0", "FilterFactory", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_FilterFactory = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/FilterFactory:1.0", "FilterFactory", &_0RL_tcTrack);
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mIstring = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/Istring:1.0", "Istring", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyName = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertyName:1.0", "PropertyName", _0RL_tc_CosNotification_mIstring, &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertyValue:1.0", "PropertyValue", CORBA::TypeCode::PR_any_tc(), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_CosNotification_mProperty[] = {
  {"name", _0RL_tc_CosNotification_mPropertyName},
  {"value", _0RL_tc_CosNotification_mPropertyValue}
};

#ifdef _0RL_tc_CosNotification_mProperty
#  undef _0RL_tc_CosNotification_mProperty
#endif
static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mProperty = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/CosNotification/Property:1.0", "Property", _0RL_structmember_CosNotification_mProperty, 2, &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertySeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertySeq:1.0", "PropertySeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_CosNotification_mProperty, &_0RL_tcTrack), &_0RL_tcTrack);




static CORBA::TypeCode_ptr _0RL_tc_AttNotification_mServerProperties = CORBA::TypeCode::PR_alias_tc("IDL:att.com/AttNotification/ServerProperties:1.0", "ServerProperties", _0RL_tc_CosNotification_mPropertySeq, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_ServerProperties = _0RL_tc_AttNotification_mServerProperties;
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_ServerProperties = _0RL_tc_AttNotification_mServerProperties;
#endif

static const char* _0RL_enumMember_CosNotification_mQoSError__code[] = { "UNSUPPORTED_PROPERTY", "UNAVAILABLE_PROPERTY", "UNSUPPORTED_VALUE", "UNAVAILABLE_VALUE", "BAD_PROPERTY", "BAD_TYPE", "BAD_VALUE" };
static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mQoSError__code = CORBA::TypeCode::PR_enum_tc("IDL:omg.org/CosNotification/QoSError_code:1.0", "QoSError_code", _0RL_enumMember_CosNotification_mQoSError__code, 7, &_0RL_tcTrack);
static CORBA::PR_structMember _0RL_structmember_CosNotification_mPropertyRange[] = {
  {"low_val", _0RL_tc_CosNotification_mPropertyValue},
  {"high_val", _0RL_tc_CosNotification_mPropertyValue}
};

#ifdef _0RL_tc_CosNotification_mPropertyRange
#  undef _0RL_tc_CosNotification_mPropertyRange
#endif
static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyRange = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/CosNotification/PropertyRange:1.0", "PropertyRange", _0RL_structmember_CosNotification_mPropertyRange, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_CosNotification_mPropertyError[] = {
  {"code", _0RL_tc_CosNotification_mQoSError__code},
  {"name", _0RL_tc_CosNotification_mPropertyName},
  {"available_range", _0RL_tc_CosNotification_mPropertyRange}
};

#ifdef _0RL_tc_CosNotification_mPropertyError
#  undef _0RL_tc_CosNotification_mPropertyError
#endif
static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyError = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/CosNotification/PropertyError:1.0", "PropertyError", _0RL_structmember_CosNotification_mPropertyError, 3, &_0RL_tcTrack);

static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyErrorSeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertyErrorSeq:1.0", "PropertyErrorSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_CosNotification_mPropertyError, &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_AttNotification_mUnsupportedServerProp[] = {
  {"server_prop_err", _0RL_tc_CosNotification_mPropertyErrorSeq}
};

static CORBA::TypeCode_ptr _0RL_tc_AttNotification_mUnsupportedServerProp = CORBA::TypeCode::PR_exception_tc("IDL:att.com/AttNotification/UnsupportedServerProp:1.0", "UnsupportedServerProp", _0RL_structmember_AttNotification_mUnsupportedServerProp, 1, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_UnsupportedServerProp = _0RL_tc_AttNotification_mUnsupportedServerProp;
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_UnsupportedServerProp = _0RL_tc_AttNotification_mUnsupportedServerProp;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace AttNotification { 
  const ::CORBA::TypeCode_ptr _tc_Server = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Server:1.0", "Server", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr AttNotification::_tc_Server = CORBA::TypeCode::PR_interface_tc("IDL:att.com/AttNotification/Server:1.0", "Server", &_0RL_tcTrack);
#endif

static void _0RL_AttNotification_mIactSeq_marshal_fn(cdrStream& _s, void* _v)
{
  AttNotification::IactSeq* _p = (AttNotification::IactSeq*)_v;
  *_p >>= _s;
}
static void _0RL_AttNotification_mIactSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  AttNotification::IactSeq* _p = new AttNotification::IactSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_AttNotification_mIactSeq_destructor_fn(void* _v)
{
  AttNotification::IactSeq* _p = (AttNotification::IactSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const AttNotification::IactSeq& _s)
{
  AttNotification::IactSeq* _p = new AttNotification::IactSeq(_s);
  _a.PR_insert(_0RL_tc_AttNotification_mIactSeq,
               _0RL_AttNotification_mIactSeq_marshal_fn,
               _0RL_AttNotification_mIactSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, AttNotification::IactSeq* _sp)
{
  _a.PR_insert(_0RL_tc_AttNotification_mIactSeq,
               _0RL_AttNotification_mIactSeq_marshal_fn,
               _0RL_AttNotification_mIactSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::IactSeq*& _sp)
{
  return _a >>= (const AttNotification::IactSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const AttNotification::IactSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_AttNotification_mIactSeq,
                    _0RL_AttNotification_mIactSeq_unmarshal_fn,
                    _0RL_AttNotification_mIactSeq_marshal_fn,
                    _0RL_AttNotification_mIactSeq_destructor_fn,
                    _v)) {
    _sp = (const AttNotification::IactSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mNameSeq_marshal_fn(cdrStream& _s, void* _v)
{
  AttNotification::NameSeq* _p = (AttNotification::NameSeq*)_v;
  *_p >>= _s;
}
static void _0RL_AttNotification_mNameSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  AttNotification::NameSeq* _p = new AttNotification::NameSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_AttNotification_mNameSeq_destructor_fn(void* _v)
{
  AttNotification::NameSeq* _p = (AttNotification::NameSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const AttNotification::NameSeq& _s)
{
  AttNotification::NameSeq* _p = new AttNotification::NameSeq(_s);
  _a.PR_insert(_0RL_tc_AttNotification_mNameSeq,
               _0RL_AttNotification_mNameSeq_marshal_fn,
               _0RL_AttNotification_mNameSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, AttNotification::NameSeq* _sp)
{
  _a.PR_insert(_0RL_tc_AttNotification_mNameSeq,
               _0RL_AttNotification_mNameSeq_marshal_fn,
               _0RL_AttNotification_mNameSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::NameSeq*& _sp)
{
  return _a >>= (const AttNotification::NameSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const AttNotification::NameSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_AttNotification_mNameSeq,
                    _0RL_AttNotification_mNameSeq_unmarshal_fn,
                    _0RL_AttNotification_mNameSeq_marshal_fn,
                    _0RL_AttNotification_mNameSeq_destructor_fn,
                    _v)) {
    _sp = (const AttNotification::NameSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mInteractive_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mInteractive_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::Interactive::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mInteractive_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::Interactive_ptr _o)
{
  AttNotification::Interactive_ptr _no = AttNotification::Interactive::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_Interactive,
               _0RL_AttNotification_mInteractive_marshal_fn,
               _0RL_AttNotification_mInteractive_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::Interactive_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_Interactive,
               _0RL_AttNotification_mInteractive_marshal_fn,
               _0RL_AttNotification_mInteractive_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::Interactive::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::Interactive_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_Interactive,
                    _0RL_AttNotification_mInteractive_unmarshal_fn,
                    _0RL_AttNotification_mInteractive_marshal_fn,
                    _0RL_AttNotification_mInteractive_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::Interactive_ptr)_r->_ptrToObjRef(AttNotification::Interactive::_PD_repoId);
    else
      _o = AttNotification::Interactive::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mCosEvProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mCosEvProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::CosEvProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mCosEvProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPushSupplier_ptr _o)
{
  AttNotification::CosEvProxyPushSupplier_ptr _no = AttNotification::CosEvProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_CosEvProxyPushSupplier,
               _0RL_AttNotification_mCosEvProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_CosEvProxyPushSupplier,
               _0RL_AttNotification_mCosEvProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::CosEvProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::CosEvProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_CosEvProxyPushSupplier,
                    _0RL_AttNotification_mCosEvProxyPushSupplier_unmarshal_fn,
                    _0RL_AttNotification_mCosEvProxyPushSupplier_marshal_fn,
                    _0RL_AttNotification_mCosEvProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::CosEvProxyPushSupplier_ptr)_r->_ptrToObjRef(AttNotification::CosEvProxyPushSupplier::_PD_repoId);
    else
      _o = AttNotification::CosEvProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mCosEvProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mCosEvProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::CosEvProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mCosEvProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPullSupplier_ptr _o)
{
  AttNotification::CosEvProxyPullSupplier_ptr _no = AttNotification::CosEvProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_CosEvProxyPullSupplier,
               _0RL_AttNotification_mCosEvProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_CosEvProxyPullSupplier,
               _0RL_AttNotification_mCosEvProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::CosEvProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::CosEvProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_CosEvProxyPullSupplier,
                    _0RL_AttNotification_mCosEvProxyPullSupplier_unmarshal_fn,
                    _0RL_AttNotification_mCosEvProxyPullSupplier_marshal_fn,
                    _0RL_AttNotification_mCosEvProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::CosEvProxyPullSupplier_ptr)_r->_ptrToObjRef(AttNotification::CosEvProxyPullSupplier::_PD_repoId);
    else
      _o = AttNotification::CosEvProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mCosEvProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mCosEvProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::CosEvProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mCosEvProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPushConsumer_ptr _o)
{
  AttNotification::CosEvProxyPushConsumer_ptr _no = AttNotification::CosEvProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_CosEvProxyPushConsumer,
               _0RL_AttNotification_mCosEvProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_CosEvProxyPushConsumer,
               _0RL_AttNotification_mCosEvProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::CosEvProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::CosEvProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_CosEvProxyPushConsumer,
                    _0RL_AttNotification_mCosEvProxyPushConsumer_unmarshal_fn,
                    _0RL_AttNotification_mCosEvProxyPushConsumer_marshal_fn,
                    _0RL_AttNotification_mCosEvProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::CosEvProxyPushConsumer_ptr)_r->_ptrToObjRef(AttNotification::CosEvProxyPushConsumer::_PD_repoId);
    else
      _o = AttNotification::CosEvProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mCosEvProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mCosEvProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::CosEvProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mCosEvProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPullConsumer_ptr _o)
{
  AttNotification::CosEvProxyPullConsumer_ptr _no = AttNotification::CosEvProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_CosEvProxyPullConsumer,
               _0RL_AttNotification_mCosEvProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::CosEvProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_CosEvProxyPullConsumer,
               _0RL_AttNotification_mCosEvProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mCosEvProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::CosEvProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::CosEvProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_CosEvProxyPullConsumer,
                    _0RL_AttNotification_mCosEvProxyPullConsumer_unmarshal_fn,
                    _0RL_AttNotification_mCosEvProxyPullConsumer_marshal_fn,
                    _0RL_AttNotification_mCosEvProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::CosEvProxyPullConsumer_ptr)_r->_ptrToObjRef(AttNotification::CosEvProxyPullConsumer::_PD_repoId);
    else
      _o = AttNotification::CosEvProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::ProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPushSupplier_ptr _o)
{
  AttNotification::ProxyPushSupplier_ptr _no = AttNotification::ProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_ProxyPushSupplier,
               _0RL_AttNotification_mProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_ProxyPushSupplier,
               _0RL_AttNotification_mProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::ProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_ProxyPushSupplier,
                    _0RL_AttNotification_mProxyPushSupplier_unmarshal_fn,
                    _0RL_AttNotification_mProxyPushSupplier_marshal_fn,
                    _0RL_AttNotification_mProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::ProxyPushSupplier_ptr)_r->_ptrToObjRef(AttNotification::ProxyPushSupplier::_PD_repoId);
    else
      _o = AttNotification::ProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::ProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPullSupplier_ptr _o)
{
  AttNotification::ProxyPullSupplier_ptr _no = AttNotification::ProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_ProxyPullSupplier,
               _0RL_AttNotification_mProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_ProxyPullSupplier,
               _0RL_AttNotification_mProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::ProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_ProxyPullSupplier,
                    _0RL_AttNotification_mProxyPullSupplier_unmarshal_fn,
                    _0RL_AttNotification_mProxyPullSupplier_marshal_fn,
                    _0RL_AttNotification_mProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::ProxyPullSupplier_ptr)_r->_ptrToObjRef(AttNotification::ProxyPullSupplier::_PD_repoId);
    else
      _o = AttNotification::ProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::ProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPushConsumer_ptr _o)
{
  AttNotification::ProxyPushConsumer_ptr _no = AttNotification::ProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_ProxyPushConsumer,
               _0RL_AttNotification_mProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_ProxyPushConsumer,
               _0RL_AttNotification_mProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::ProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_ProxyPushConsumer,
                    _0RL_AttNotification_mProxyPushConsumer_unmarshal_fn,
                    _0RL_AttNotification_mProxyPushConsumer_marshal_fn,
                    _0RL_AttNotification_mProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::ProxyPushConsumer_ptr)_r->_ptrToObjRef(AttNotification::ProxyPushConsumer::_PD_repoId);
    else
      _o = AttNotification::ProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::ProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPullConsumer_ptr _o)
{
  AttNotification::ProxyPullConsumer_ptr _no = AttNotification::ProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_ProxyPullConsumer,
               _0RL_AttNotification_mProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::ProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_ProxyPullConsumer,
               _0RL_AttNotification_mProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::ProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_ProxyPullConsumer,
                    _0RL_AttNotification_mProxyPullConsumer_unmarshal_fn,
                    _0RL_AttNotification_mProxyPullConsumer_marshal_fn,
                    _0RL_AttNotification_mProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::ProxyPullConsumer_ptr)_r->_ptrToObjRef(AttNotification::ProxyPullConsumer::_PD_repoId);
    else
      _o = AttNotification::ProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mStructuredProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mStructuredProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::StructuredProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mStructuredProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPushSupplier_ptr _o)
{
  AttNotification::StructuredProxyPushSupplier_ptr _no = AttNotification::StructuredProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_StructuredProxyPushSupplier,
               _0RL_AttNotification_mStructuredProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_StructuredProxyPushSupplier,
               _0RL_AttNotification_mStructuredProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::StructuredProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::StructuredProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_StructuredProxyPushSupplier,
                    _0RL_AttNotification_mStructuredProxyPushSupplier_unmarshal_fn,
                    _0RL_AttNotification_mStructuredProxyPushSupplier_marshal_fn,
                    _0RL_AttNotification_mStructuredProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::StructuredProxyPushSupplier_ptr)_r->_ptrToObjRef(AttNotification::StructuredProxyPushSupplier::_PD_repoId);
    else
      _o = AttNotification::StructuredProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mStructuredProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mStructuredProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::StructuredProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mStructuredProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPullSupplier_ptr _o)
{
  AttNotification::StructuredProxyPullSupplier_ptr _no = AttNotification::StructuredProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_StructuredProxyPullSupplier,
               _0RL_AttNotification_mStructuredProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_StructuredProxyPullSupplier,
               _0RL_AttNotification_mStructuredProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::StructuredProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::StructuredProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_StructuredProxyPullSupplier,
                    _0RL_AttNotification_mStructuredProxyPullSupplier_unmarshal_fn,
                    _0RL_AttNotification_mStructuredProxyPullSupplier_marshal_fn,
                    _0RL_AttNotification_mStructuredProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::StructuredProxyPullSupplier_ptr)_r->_ptrToObjRef(AttNotification::StructuredProxyPullSupplier::_PD_repoId);
    else
      _o = AttNotification::StructuredProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mStructuredProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mStructuredProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::StructuredProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mStructuredProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPushConsumer_ptr _o)
{
  AttNotification::StructuredProxyPushConsumer_ptr _no = AttNotification::StructuredProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_StructuredProxyPushConsumer,
               _0RL_AttNotification_mStructuredProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_StructuredProxyPushConsumer,
               _0RL_AttNotification_mStructuredProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::StructuredProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::StructuredProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_StructuredProxyPushConsumer,
                    _0RL_AttNotification_mStructuredProxyPushConsumer_unmarshal_fn,
                    _0RL_AttNotification_mStructuredProxyPushConsumer_marshal_fn,
                    _0RL_AttNotification_mStructuredProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::StructuredProxyPushConsumer_ptr)_r->_ptrToObjRef(AttNotification::StructuredProxyPushConsumer::_PD_repoId);
    else
      _o = AttNotification::StructuredProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mStructuredProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mStructuredProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::StructuredProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mStructuredProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPullConsumer_ptr _o)
{
  AttNotification::StructuredProxyPullConsumer_ptr _no = AttNotification::StructuredProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_StructuredProxyPullConsumer,
               _0RL_AttNotification_mStructuredProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::StructuredProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_StructuredProxyPullConsumer,
               _0RL_AttNotification_mStructuredProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mStructuredProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::StructuredProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::StructuredProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_StructuredProxyPullConsumer,
                    _0RL_AttNotification_mStructuredProxyPullConsumer_unmarshal_fn,
                    _0RL_AttNotification_mStructuredProxyPullConsumer_marshal_fn,
                    _0RL_AttNotification_mStructuredProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::StructuredProxyPullConsumer_ptr)_r->_ptrToObjRef(AttNotification::StructuredProxyPullConsumer::_PD_repoId);
    else
      _o = AttNotification::StructuredProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mSequenceProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mSequenceProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::SequenceProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mSequenceProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPushSupplier_ptr _o)
{
  AttNotification::SequenceProxyPushSupplier_ptr _no = AttNotification::SequenceProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_SequenceProxyPushSupplier,
               _0RL_AttNotification_mSequenceProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_SequenceProxyPushSupplier,
               _0RL_AttNotification_mSequenceProxyPushSupplier_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::SequenceProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::SequenceProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_SequenceProxyPushSupplier,
                    _0RL_AttNotification_mSequenceProxyPushSupplier_unmarshal_fn,
                    _0RL_AttNotification_mSequenceProxyPushSupplier_marshal_fn,
                    _0RL_AttNotification_mSequenceProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::SequenceProxyPushSupplier_ptr)_r->_ptrToObjRef(AttNotification::SequenceProxyPushSupplier::_PD_repoId);
    else
      _o = AttNotification::SequenceProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mSequenceProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mSequenceProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::SequenceProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mSequenceProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPullSupplier_ptr _o)
{
  AttNotification::SequenceProxyPullSupplier_ptr _no = AttNotification::SequenceProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_SequenceProxyPullSupplier,
               _0RL_AttNotification_mSequenceProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_SequenceProxyPullSupplier,
               _0RL_AttNotification_mSequenceProxyPullSupplier_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::SequenceProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::SequenceProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_SequenceProxyPullSupplier,
                    _0RL_AttNotification_mSequenceProxyPullSupplier_unmarshal_fn,
                    _0RL_AttNotification_mSequenceProxyPullSupplier_marshal_fn,
                    _0RL_AttNotification_mSequenceProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::SequenceProxyPullSupplier_ptr)_r->_ptrToObjRef(AttNotification::SequenceProxyPullSupplier::_PD_repoId);
    else
      _o = AttNotification::SequenceProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mSequenceProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mSequenceProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::SequenceProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mSequenceProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPushConsumer_ptr _o)
{
  AttNotification::SequenceProxyPushConsumer_ptr _no = AttNotification::SequenceProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_SequenceProxyPushConsumer,
               _0RL_AttNotification_mSequenceProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_SequenceProxyPushConsumer,
               _0RL_AttNotification_mSequenceProxyPushConsumer_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::SequenceProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::SequenceProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_SequenceProxyPushConsumer,
                    _0RL_AttNotification_mSequenceProxyPushConsumer_unmarshal_fn,
                    _0RL_AttNotification_mSequenceProxyPushConsumer_marshal_fn,
                    _0RL_AttNotification_mSequenceProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::SequenceProxyPushConsumer_ptr)_r->_ptrToObjRef(AttNotification::SequenceProxyPushConsumer::_PD_repoId);
    else
      _o = AttNotification::SequenceProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mSequenceProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mSequenceProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::SequenceProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mSequenceProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPullConsumer_ptr _o)
{
  AttNotification::SequenceProxyPullConsumer_ptr _no = AttNotification::SequenceProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_SequenceProxyPullConsumer,
               _0RL_AttNotification_mSequenceProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::SequenceProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_SequenceProxyPullConsumer,
               _0RL_AttNotification_mSequenceProxyPullConsumer_marshal_fn,
               _0RL_AttNotification_mSequenceProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::SequenceProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::SequenceProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_SequenceProxyPullConsumer,
                    _0RL_AttNotification_mSequenceProxyPullConsumer_unmarshal_fn,
                    _0RL_AttNotification_mSequenceProxyPullConsumer_marshal_fn,
                    _0RL_AttNotification_mSequenceProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::SequenceProxyPullConsumer_ptr)_r->_ptrToObjRef(AttNotification::SequenceProxyPullConsumer::_PD_repoId);
    else
      _o = AttNotification::SequenceProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mSupplierAdmin_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mSupplierAdmin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::SupplierAdmin::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mSupplierAdmin_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::SupplierAdmin_ptr _o)
{
  AttNotification::SupplierAdmin_ptr _no = AttNotification::SupplierAdmin::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_SupplierAdmin,
               _0RL_AttNotification_mSupplierAdmin_marshal_fn,
               _0RL_AttNotification_mSupplierAdmin_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::SupplierAdmin_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_SupplierAdmin,
               _0RL_AttNotification_mSupplierAdmin_marshal_fn,
               _0RL_AttNotification_mSupplierAdmin_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::SupplierAdmin::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::SupplierAdmin_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_SupplierAdmin,
                    _0RL_AttNotification_mSupplierAdmin_unmarshal_fn,
                    _0RL_AttNotification_mSupplierAdmin_marshal_fn,
                    _0RL_AttNotification_mSupplierAdmin_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::SupplierAdmin_ptr)_r->_ptrToObjRef(AttNotification::SupplierAdmin::_PD_repoId);
    else
      _o = AttNotification::SupplierAdmin::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mConsumerAdmin_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mConsumerAdmin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::ConsumerAdmin::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mConsumerAdmin_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::ConsumerAdmin_ptr _o)
{
  AttNotification::ConsumerAdmin_ptr _no = AttNotification::ConsumerAdmin::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_ConsumerAdmin,
               _0RL_AttNotification_mConsumerAdmin_marshal_fn,
               _0RL_AttNotification_mConsumerAdmin_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::ConsumerAdmin_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_ConsumerAdmin,
               _0RL_AttNotification_mConsumerAdmin_marshal_fn,
               _0RL_AttNotification_mConsumerAdmin_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::ConsumerAdmin::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ConsumerAdmin_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_ConsumerAdmin,
                    _0RL_AttNotification_mConsumerAdmin_unmarshal_fn,
                    _0RL_AttNotification_mConsumerAdmin_marshal_fn,
                    _0RL_AttNotification_mConsumerAdmin_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::ConsumerAdmin_ptr)_r->_ptrToObjRef(AttNotification::ConsumerAdmin::_PD_repoId);
    else
      _o = AttNotification::ConsumerAdmin::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mChannelStats_marshal_fn(cdrStream& _s, void* _v)
{
  AttNotification::ChannelStats* _p = (AttNotification::ChannelStats*)_v;
  *_p >>= _s;
}
static void _0RL_AttNotification_mChannelStats_unmarshal_fn(cdrStream& _s, void*& _v)
{
  AttNotification::ChannelStats* _p = new AttNotification::ChannelStats;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_AttNotification_mChannelStats_destructor_fn(void* _v)
{
  AttNotification::ChannelStats* _p = (AttNotification::ChannelStats*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const AttNotification::ChannelStats& _s)
{
  AttNotification::ChannelStats* _p = new AttNotification::ChannelStats(_s);
  _a.PR_insert(_0RL_tc_AttNotification_mChannelStats,
               _0RL_AttNotification_mChannelStats_marshal_fn,
               _0RL_AttNotification_mChannelStats_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, AttNotification::ChannelStats* _sp)
{
  _a.PR_insert(_0RL_tc_AttNotification_mChannelStats,
               _0RL_AttNotification_mChannelStats_marshal_fn,
               _0RL_AttNotification_mChannelStats_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::ChannelStats*& _sp)
{
  return _a >>= (const AttNotification::ChannelStats*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const AttNotification::ChannelStats*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_AttNotification_mChannelStats,
                    _0RL_AttNotification_mChannelStats_unmarshal_fn,
                    _0RL_AttNotification_mChannelStats_marshal_fn,
                    _0RL_AttNotification_mChannelStats_destructor_fn,
                    _v)) {
    _sp = (const AttNotification::ChannelStats*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mEventChannel_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mEventChannel_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::EventChannel::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mEventChannel_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::EventChannel_ptr _o)
{
  AttNotification::EventChannel_ptr _no = AttNotification::EventChannel::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_EventChannel,
               _0RL_AttNotification_mEventChannel_marshal_fn,
               _0RL_AttNotification_mEventChannel_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::EventChannel_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_EventChannel,
               _0RL_AttNotification_mEventChannel_marshal_fn,
               _0RL_AttNotification_mEventChannel_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::EventChannel::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::EventChannel_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_EventChannel,
                    _0RL_AttNotification_mEventChannel_unmarshal_fn,
                    _0RL_AttNotification_mEventChannel_marshal_fn,
                    _0RL_AttNotification_mEventChannel_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::EventChannel_ptr)_r->_ptrToObjRef(AttNotification::EventChannel::_PD_repoId);
    else
      _o = AttNotification::EventChannel::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mEventChannelFactory_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mEventChannelFactory_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::EventChannelFactory::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mEventChannelFactory_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::EventChannelFactory_ptr _o)
{
  AttNotification::EventChannelFactory_ptr _no = AttNotification::EventChannelFactory::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_EventChannelFactory,
               _0RL_AttNotification_mEventChannelFactory_marshal_fn,
               _0RL_AttNotification_mEventChannelFactory_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::EventChannelFactory_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_EventChannelFactory,
               _0RL_AttNotification_mEventChannelFactory_marshal_fn,
               _0RL_AttNotification_mEventChannelFactory_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::EventChannelFactory::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::EventChannelFactory_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_EventChannelFactory,
                    _0RL_AttNotification_mEventChannelFactory_unmarshal_fn,
                    _0RL_AttNotification_mEventChannelFactory_marshal_fn,
                    _0RL_AttNotification_mEventChannelFactory_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::EventChannelFactory_ptr)_r->_ptrToObjRef(AttNotification::EventChannelFactory::_PD_repoId);
    else
      _o = AttNotification::EventChannelFactory::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mFilter_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mFilter_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::Filter::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mFilter_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::Filter_ptr _o)
{
  AttNotification::Filter_ptr _no = AttNotification::Filter::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_Filter,
               _0RL_AttNotification_mFilter_marshal_fn,
               _0RL_AttNotification_mFilter_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::Filter_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_Filter,
               _0RL_AttNotification_mFilter_marshal_fn,
               _0RL_AttNotification_mFilter_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::Filter::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::Filter_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_Filter,
                    _0RL_AttNotification_mFilter_unmarshal_fn,
                    _0RL_AttNotification_mFilter_marshal_fn,
                    _0RL_AttNotification_mFilter_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::Filter_ptr)_r->_ptrToObjRef(AttNotification::Filter::_PD_repoId);
    else
      _o = AttNotification::Filter::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mMappingFilter_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mMappingFilter_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::MappingFilter::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mMappingFilter_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::MappingFilter_ptr _o)
{
  AttNotification::MappingFilter_ptr _no = AttNotification::MappingFilter::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_MappingFilter,
               _0RL_AttNotification_mMappingFilter_marshal_fn,
               _0RL_AttNotification_mMappingFilter_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::MappingFilter_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_MappingFilter,
               _0RL_AttNotification_mMappingFilter_marshal_fn,
               _0RL_AttNotification_mMappingFilter_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::MappingFilter::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::MappingFilter_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_MappingFilter,
                    _0RL_AttNotification_mMappingFilter_unmarshal_fn,
                    _0RL_AttNotification_mMappingFilter_marshal_fn,
                    _0RL_AttNotification_mMappingFilter_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::MappingFilter_ptr)_r->_ptrToObjRef(AttNotification::MappingFilter::_PD_repoId);
    else
      _o = AttNotification::MappingFilter::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_AttNotification_mFilterFactory_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mFilterFactory_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::FilterFactory::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mFilterFactory_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::FilterFactory_ptr _o)
{
  AttNotification::FilterFactory_ptr _no = AttNotification::FilterFactory::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_FilterFactory,
               _0RL_AttNotification_mFilterFactory_marshal_fn,
               _0RL_AttNotification_mFilterFactory_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::FilterFactory_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_FilterFactory,
               _0RL_AttNotification_mFilterFactory_marshal_fn,
               _0RL_AttNotification_mFilterFactory_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::FilterFactory::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::FilterFactory_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_FilterFactory,
                    _0RL_AttNotification_mFilterFactory_unmarshal_fn,
                    _0RL_AttNotification_mFilterFactory_marshal_fn,
                    _0RL_AttNotification_mFilterFactory_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::FilterFactory_ptr)_r->_ptrToObjRef(AttNotification::FilterFactory::_PD_repoId);
    else
      _o = AttNotification::FilterFactory::_nil();
    return 1;
  }
  return 0;
}


static void _0RL_AttNotification_mUnsupportedServerProp_marshal_fn(cdrStream& _s, void* _v)
{
  const AttNotification::UnsupportedServerProp* _p = (const AttNotification::UnsupportedServerProp*)_v;
  *_p >>= _s;
}
static void _0RL_AttNotification_mUnsupportedServerProp_unmarshal_fn(cdrStream& _s, void*& _v)
{
  AttNotification::UnsupportedServerProp* _p = new AttNotification::UnsupportedServerProp;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_AttNotification_mUnsupportedServerProp_destructor_fn(void* _v)
{
  AttNotification::UnsupportedServerProp* _p = (AttNotification::UnsupportedServerProp*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const AttNotification::UnsupportedServerProp& _s)
{
  AttNotification::UnsupportedServerProp* _p = new AttNotification::UnsupportedServerProp(_s);
  _a.PR_insert(_0RL_tc_AttNotification_mUnsupportedServerProp,
               _0RL_AttNotification_mUnsupportedServerProp_marshal_fn,
               _0RL_AttNotification_mUnsupportedServerProp_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const AttNotification::UnsupportedServerProp* _sp)
{
  _a.PR_insert(_0RL_tc_AttNotification_mUnsupportedServerProp,
               _0RL_AttNotification_mUnsupportedServerProp_marshal_fn,
               _0RL_AttNotification_mUnsupportedServerProp_destructor_fn,
               (AttNotification::UnsupportedServerProp*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const AttNotification::UnsupportedServerProp*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_AttNotification_mUnsupportedServerProp,
                    _0RL_AttNotification_mUnsupportedServerProp_unmarshal_fn,
                    _0RL_AttNotification_mUnsupportedServerProp_marshal_fn,
                    _0RL_AttNotification_mUnsupportedServerProp_destructor_fn,
                    _v)) {
    _sp = (const AttNotification::UnsupportedServerProp*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cAttNotification_mUnsupportedServerProp(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const AttNotification::UnsupportedServerProp & _ex = (const AttNotification::UnsupportedServerProp &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cAttNotification_mUnsupportedServerProp (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const AttNotification::UnsupportedServerProp* _ex = (const AttNotification::UnsupportedServerProp*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cAttNotification_mUnsupportedServerProp {
public:
  _0RL_insertToAny_Singleton__cAttNotification_mUnsupportedServerProp() {
    AttNotification::UnsupportedServerProp::insertToAnyFn = _0RL_insertToAny__cAttNotification_mUnsupportedServerProp;
    AttNotification::UnsupportedServerProp::insertToAnyFnNCP = _0RL_insertToAnyNCP__cAttNotification_mUnsupportedServerProp;
  }
};
static _0RL_insertToAny_Singleton__cAttNotification_mUnsupportedServerProp _0RL_insertToAny_Singleton__cAttNotification_mUnsupportedServerProp_;

static void _0RL_AttNotification_mServer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_AttNotification_mServer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(AttNotification::Server::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_AttNotification_mServer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, AttNotification::Server_ptr _o)
{
  AttNotification::Server_ptr _no = AttNotification::Server::_duplicate(_o);
  _a.PR_insert(AttNotification::_tc_Server,
               _0RL_AttNotification_mServer_marshal_fn,
               _0RL_AttNotification_mServer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, AttNotification::Server_ptr* _op)
{
  _a.PR_insert(AttNotification::_tc_Server,
               _0RL_AttNotification_mServer_marshal_fn,
               _0RL_AttNotification_mServer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = AttNotification::Server::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, AttNotification::Server_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(AttNotification::_tc_Server,
                    _0RL_AttNotification_mServer_unmarshal_fn,
                    _0RL_AttNotification_mServer_marshal_fn,
                    _0RL_AttNotification_mServer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (AttNotification::Server_ptr)_r->_ptrToObjRef(AttNotification::Server::_PD_repoId);
    else
      _o = AttNotification::Server::_nil();
    return 1;
  }
  return 0;
}

